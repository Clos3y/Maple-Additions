MatrixRoot:=proc(A::Matrix,r,method:="element")

local i,f,R,k,p,solutionDummy,sol,solutions,j;

# v1.1

if method="integral" then 

# A is a Complex nxn matrix with positive real eigenvalues
# r is the root you wish to take, with r in (0,1)

#Exception handling

for i from 1 to numelems(LinearAlgebra[Eigenvalues](A)) do:

	if evalf(LinearAlgebra[Eigenvalues](A)[i])<=0 then error "Negative eigenvalue; must be positive" else end if;

end do;

if 0>r or r>1 then error "Root invalid; must be in (0,1)" else end if;

# Beyond square-roots, this procedure tends to give results which are unevaluated sums in terms of RootOf_

return map(convert,sin(r*Pi)/(r*Pi) * A . map(int,((t^(1/r)*Matrix((sqrt(numelems(A))),shape=identity) + A)^(-1),t=0..infinity)),radical)

# Credit for this formula goes to Nick Higham and Lijing Lin https://www.maths.manchester.ac.uk/~higham/talks/talk09_stoch.pdf p3, however, I cannot find a source beyond this

elif method="element" then 

solutionDummy:=[]:

f:=(i,j)->x[i,j]:

R:=Matrix(sqrt(numelems(A)),f);

for k from 1 to sqrt(numelems(A)) do:

for p from 1 to sqrt(numelems(A)) do:

solutionDummy:=[op(solutionDummy),A[k,p]=(R^(1/r))[k,p]]

od;

od;

if numelems([solve(solutionDummy)])<>1 then

sol:=[solve(solutionDummy,convert(R,list))];

solutions:=[]:

for j,i in sol do:

solutions := [op(solutions),subs(map(convert,op(i),radical),R)];

end do;
return solutions;
else

return subs(map(convert,solve(solutionDummy,convert(R,list)),radical),R)

end if;

else end if;

end proc:
